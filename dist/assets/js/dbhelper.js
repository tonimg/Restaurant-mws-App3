class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static get idbPromise(){return idb.open("restaurants",1,function(e){switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"});case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant_id","restaurant_id"),e.createObjectStore("offline-reviews",{keyPath:"updatedAt"})}})}static fetchRestaurants(e){DBHelper.idbPromise.then(t=>{t.transaction("restaurants").objectStore("restaurants").getAll().then(r=>{r.length>1?e(null,r):fetch(`${DBHelper.DATABASE_URL}/restaurants`).then(e=>e.json()).then(r=>{const n=t.transaction("restaurants","readwrite").objectStore("restaurants");r.forEach(e=>n.put(e)),e(null,r)}).catch(t=>{e(t,null)})})})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,s)=>{if(n)console.log("error: ",n),r(n,null);else{let n=s;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchReviews(e,t){DBHelper.idbPromise.then(r=>{if(!r)return;r.transaction("reviews","readwrite").objectStore("reviews").getAll().then(n=>{if(n.length>0){let s=[];n.forEach(t=>{t.restaurant_id==e&&s.push(t)}),r.transaction("offline-reviews").objectStore("offline-reviews").getAll().then(n=>{n.length>0&&(console.log("looping offline-reviews in IDB",n),n.forEach(t=>{t.restaurant_id==e&&s.push(t)})),s.length>0?t(null,s):fetch(`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${e}`).then(e=>e.json()).then(e=>{const n=r.transaction("reviews","readwrite").objectStore("reviews");e.forEach(e=>n.put(e)),t(null,e)}).catch(e=>{t(e,null)})})}else fetch(`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${e}`).then(e=>e.json()).then(e=>{const n=r.transaction("reviews","readwrite").objectStore("reviews");e.forEach(e=>n.put(e)),console.log("storing reviews in IDB",e),t(null,e)}).catch(e=>{t(e,null)})}).catch(e=>{console.log("nothing in IDB")})})}static fetchReviewsByRestaurantId(e,t){DBHelper.fetchReviews(e,(r,n)=>{if(r)t(r,null);else{const r=e=>t=>t.restaurant_id==e;n.filter(r(e))?t(null,n):t("Review does not exist",null)}})}static addReviewIDB(e){return fetch(`${DBHelper.DATABASE_URL}/reviews`,{method:"POST",body:JSON.stringify(e),headers:{Accept:"aplication/json","Content-Type":"aplication/json"}}).then(e=>e.ok?e.json().then(e=>(console.log("review: ",e),e)):Promise.reject(new Error(`Request failed. Returned status of ${response.status}`)))}static saveReviewOffline(e){DBHelper.idbPromise.then(t=>{if(!t)return;const r=t.transaction("offline-reviews","readwrite");return r.objectStore("offline-reviews").put(e),r.complete}).then(()=>{console.log("Review saved offline")})}static clearOfflineReviews(){DBHelper.idbPromise.then(e=>{e.transaction("offline-reviews","readwrite").objectStore("offline-reviews").clear()})}static setFormattedDate(e){const t=new Date(e.createdAt),r=("0"+t.getDate()).slice(-2),n=("0"+(t.getMonth()+1)).slice(-2),s=t.getFullYear();e.date=`${r}/${n}/${s}`}static setFavorite(e,t){let r={favorite:t};return fetch(`${DBHelper.DATABASE_URL}/restaurants/${e}`,{method:"PUT",body:JSON.stringify(r)}).then(e=>e.json()).then(e=>(DBHelper.idbPromise.then(t=>{if(!t)return;t.transaction("restaurants","readwrite").objectStore("restaurants").put(e)}),e)).catch(e=>console.log(e))}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`./assets/img/${e.photograph}.jpg`}static mapMarkerForRestaurant(e,t){if(!e)return;return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}