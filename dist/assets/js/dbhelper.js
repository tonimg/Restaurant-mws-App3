class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static get dbPromise(){return idb.open("restaurants",1,function(e){e.createObjectStore("restaurants",{keyPath:"id"}),e.createObjectStore("reviews",{keyPath:"id"}),e.createObjectStore("offline-reviews",{keyPath:"updatedAt"})})}static fetchRestaurants(e){DBHelper.dbPromise.then(t=>{if(!t)return;t.transaction("restaurants","readwrite").objectStore("restaurants").getAll().then(r=>fetch(`${DBHelper.DATABASE_URL}/restaurants`).then(e=>e.json()).then(r=>{const a=t.transaction("restaurants","readwrite").objectStore("restaurants");r.forEach(e=>{a.put(e)}),e(null,r)}).catch(t=>{e(t,null)}))})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.find(t=>t.id==e);r?(t(null,r),console.log("restaurant: ",r)):t("Restaurant does not exist",null)}})}static fetchReviews(e){DBHelper.dbPromise.then(t=>{if(!t)return;t.transaction("reviews","readwrite").objectStore("reviews").getAll().then(r=>{if(!(r&&r.length>0))return fetch(`${DBHelper.DATABASE_URL}/reviews/`).then(e=>e.json()).then(r=>{const a=t.transaction("reviews","readwrite").objectStore("reviews");r.forEach(e=>{a.put(e)}),e(null,r)}).catch(t=>{e(t,null)});e(null,r)})})}static fetchReviewsByRestaurantId(e,t){DBHelper.fetchReviews((r,a)=>{if(r)t(r,null);else{const r=e=>t=>t.restaurant_id==e,n=a.filter(r(e));n?t(null,n):t("Review does not exist",null)}})}static saveReviewOffline(e){DBHelper.dbPromise.then(e=>{if(!e)return;e.transaction("offline-reviews").objectStore("offline-reviews").getAll().then(e=>{e.forEach(e=>{DBHelper.addReviewIDB(e)}),DBHelper.clearOfflineReviews()})})}static clearOfflineReviews(){DBHelper.dbPromise.then(e=>{e.transaction("offline-reviews","readwrite").objectStore("offline-reviews").clear()})}static addReviewIDB(e){return fetch(DBHelper.DATABASE_URL+"/reviews",{method:"POST",body:JSON.stringify(e),headers:{Accept:"aplication/json","Content-Type":"aplication/json"}}).then(e=>e.ok?e.json().then(e=>(console.log("data: ",e),e)):Promise.reject(new Error(`Request failed. Returned status of ${e.status}`)))}static setFormattedDate(e){const t=new Date(e.createdAt),r=("0"+t.getDate()).slice(-2),a=("0"+(t.getMonth()+1)).slice(-2),n=t.getFullYear();e.date=`${r}/${a}/${n}`}static setFavorite(e,t){let r={favorite:t};return fetch(`${DBHelper.DATABASE_URL}/restaurants/${e}`,{body:JSON.stringify(r),method:"PUT"}).then(e=>e.json()).then(e=>(DBHelper.dbPromise.then(t=>{if(!t)return;t.transaction("restaurants","readwrite").objectStore("restaurants").put(e)}),e)).catch(e=>console.log(e))}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((a,n)=>{if(a)console.log("error: ",a),r(a,null);else{let a=n;"all"!=e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!=t&&(a=a.filter(e=>e.neighborhood==t)),r(null,a)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),a=t.filter((e,r)=>t.indexOf(e)==r);e(null,a)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),a=t.filter((e,r)=>t.indexOf(e)==r);e(null,a)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`./assets/img/${e.photograph}.jpg`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}